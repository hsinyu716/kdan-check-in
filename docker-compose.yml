version: '3.8'
x-base: &BASE
  environment:
    LANG: en_US.UTF-8
  restart: "unless-stopped"
  logging:
    driver: "json-file"
    options:
      max-size: "10k"
      max-file: "30"
services:
  node_app:
    <<: *BASE
    build:
      context: .
      args:
        - NODE_ENV=development
        - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@db:5432/${DB_NAME}
        - DATABASE_URL_TEST=postgresql://${DB_USER}:${DB_PASSWORD}@db:5432/${DB_NAME}
    # you can use legacy debug config or new inspect
    # NOTE: if nodemon isn't restarting on changes, you might be on Windows
    # which has trouble seeing file changes, so add -L to use legacy polling
    # https://github.com/remy/nodemon#application-isnt-restarting
    #command: ../node_modules/.bin/nodemon --debug=0.0.0.0:5858
    command: ../node_modules/.bin/nodemon --inspect=0.0.0.0:9229 ./bin/www
    ports:
      - "3000:3000"
      - "9229:9229"
      - "9230:9230"
    volumes:
      - ./node_app:/opt/node_app/app:delegated
      # bind-mounting these two files in will let you add packages during development without rebuilding
      # for example, to add bower to your app while developing, just install it inside the container
      # and then nodemon will restart. Your changes will last until you "docker-compose down" and will
      # be saved on host for next build
      # NOTE: this won't work on Docker Toolbox (virtualbox) which doesn't bind-mount single files
      # docker-compose exec node npm install --save bower
      - ./node_app/package.json:/opt/node_app/package.json
      - ./node_app/pnpm-lock.yaml:/opt/node_app/pnpm-lock.yaml
      # this is a workaround to prevent host node_modules from accidently getting mounted in container
      # in case you want to use node/npm both outside container for test/lint etc. and also inside container
      # this will overwrite the default node_modules dir in container so it won't conflict with our
      # /opt/node_app/node_modules location. Thanks to PR from @brnluiz
      - notused:/opt/node_app/app/node_modules
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      disable: true
  db:
    build:
      context: ./node_app/db
      dockerfile: Dockerfile
    expose:
      - 5432
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 10s
      start_period: 10s
      timeout: 4s
      retries: 3
  swagger-ui:
    image: swaggerapi/swagger-ui
    container_name: swagger_ui_container
    ports:
      - "3001:8080"
    volumes:
      - ./doc:/usr/share/nginx/html/doc
    environment:
      API_URL: doc/openapi.yaml
volumes:
  notused:
